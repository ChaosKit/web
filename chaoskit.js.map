{
  "version": 3,
  "file": "chaoskit.js",
  "sourceRoot": "/",
  "sources": [
    "chaoskit.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "hue2rgb = (p, q, t) ->\n  t += 1 if t < 0\n  t -= 1 if t > 1\n\n  return p + (q - p) * 6 * t         if t < 1/6\n  return q                           if t < 0.5\n  return p + (q - p) * (2/3 - t) * 6 if t < 2/3\n\n  return p\n\nrgb2hsl = (ri, gi, bi) ->\n  [r, g, b] = [ri / 255, gi / 255, bi / 255]\n  max = Math.max(r, g, b)\n  min = Math.min(r, g, b)\n\n  l = (max + min) / 2\n\n  if (max == min)\n    h = 0\n    s = 0\n  else\n    d = max - min\n    s = if l > 0.5 then d / (2 - max - min) else d / (max + min)\n\n    h = switch max\n      when r then (g - b) / d + (if g < b then 6 else 0)\n      when g then (b - r) / d + 2\n      when b then (r - g) / d + 4\n\n    h /= 6\n\n  h: h\n  s: s\n  l: l\n\nhex2rgb = (hex) ->\n  matches = /#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})/.exec(hex)\n\n  r: parseInt(matches[1], 16)\n  g: parseInt(matches[2], 16)\n  b: parseInt(matches[3], 16)\n\nroughlyEquals = (a, b) ->\n  Math.abs(a - b) < 0.0001\n\nclass Size\n  constructor: (@width, @height) ->\n    @area = @width * @height\n\n  contains: (x, y) ->\n    x >= 0 && x < @width && y >= 0 && y < @height\n\nclass Bounds\n  constructor: (@left, @right, @top, @bottom) ->\n    @width = @right - @left\n    @height = @bottom - @top\n\n  contain: (x, y) ->\n    x >= @left && x <= @right && y >= @top && y <= @bottom\n\n  @fromZoomAndCenter: (zoomLevel, centerX, centerY) ->\n    zoom = Math.pow(2, 5 - zoomLevel * 0.5)\n    new Bounds(-zoom + centerX, zoom + centerX, -zoom + centerY, zoom + centerY)\n\n  @areValid: (bounds) ->\n    bounds != null \\\n    && (['left', 'right', 'top', 'bottom'].every (key) -> typeof bounds[key] == 'number') \\\n    && bounds.left <= bounds.right && bounds.top <= bounds.bottom\n\nclass Grid\n  constructor: (@size) ->\n    @view = new Float32Array(size.area)\n\n    @max = 0\n    @min = 0\n    @logDenominator = 0\n\n  clear: ->\n    for i in [0...@size.area]\n      @view[i] = 0\n\n    @max = 0\n    @min = 0\n    @logDenominator = 0\n\n    return @\n\n  forEach: (fn) ->\n    for i in [0...@size.area]\n      fn(@view[i], i, @view)\n\n    return @\n\n  index: (x, y) -> (y|0) * @size.width + (x|0)\n\n  setIndex: (index, value) ->\n    @view[index] = value\n\n    if value > @max\n      @max = value\n      @logDenominator = Math.log(@max - @min + 1)\n    if value < @min\n      @min = value\n      @logDenominator = Math.log(@max - @min + 1)\n\n    return @\n\n  addIndex: (index, step = 1) -> @setIndex(index, @view[index] + step)\n\n  setXY: (x, y, value) ->\n    return unless @size.contains(x, y)\n    @setIndex(@index(x, y), value)\n  addXY: (x, y, step = 1) ->\n    return unless @size.contains(x, y)\n    @addIndex(@index(x, y), step)\n\nclass Renderer\n  constructor: (@size, @context) ->\n    @imageData = @context.getImageData(0, 0, @size.width, @size.height)\n\n    pixbuf = new ArrayBuffer(@imageData.data.length)\n    @pixelGrid = new Int32Array(pixbuf)\n    @pixel8 = new Uint8ClampedArray(pixbuf)\n\n  render: (pixelMapper) ->\n    for i in [0...@size.area]\n      value = pixelMapper(i)\n\n      @pixelGrid[i] = (255 << 24) | (value.b << 16) | (value.g << 8) | value.r\n\n    @imageData.data.set(@pixel8)\n    @context.putImageData(@imageData, 0, 0)\n\n@GridMapper =\n  Zero: -> 0\n  One: -> 1\n  Constant: (c) ->\n    return -> c\n  Binary: (grid) ->\n    return (index) -> (grid.view[index] > 0) ? 1 : 0\n  Linear: (grid) ->\n    return (index) -> (grid.view[index] - grid.min) / (grid.max - grid.min)\n  Logarithmic: (grid) ->\n    return (index) ->\n      return 0 if grid.view[index] <= 0\n      Math.log(grid.view[index] - grid.min + 1) / grid.logDenominator\n  Corrected: (gridMapper, curve) ->\n    return (index) ->\n      curve(gridMapper(index))\n\n@PixelMapper =\n  Monochrome: (gridMapper) ->\n    return (index) ->\n      value = gridMapper(index) * 255\n\n      r: value\n      g: value\n      b: value\n  Gradient: (gradient, gridMapper) ->\n    return (index) ->\n      gradient(gridMapper(index))\n  RGB: (r, g, b) ->\n    return (index) ->\n      r: r(index) * 255\n      g: g(index) * 255\n      b: b(index) * 255\n  HSL: (h, s, l) ->\n    return (index) ->\n      vh = h(index)\n      vs = s(index)\n      vl = l(index)\n\n      if vs == 0\n        value = vl * 255\n        return {\n          r: value\n          g: value\n          b: value\n        }\n\n      q = if vl < 0.5 then vl * (1 + vs) else vl + vs - vl * vs\n      p = 2 * vl - q\n\n      r: hue2rgb(p, q, vh + 1/3) * 255\n      g: hue2rgb(p, q, vh) * 255\n      b: hue2rgb(p, q, vh - 1/3) * 255\n  Inverse: (pixelMapper) ->\n    return (index) ->\n      result = pixelMapper(index)\n\n      r: 255 - result.r\n      g: 255 - result.g\n      b: 255 - result.b\n\nStandardCurve = (a, b, c) ->\n  return (x) ->\n    return 0 if x < 0\n    return 1 if x > 1\n\n    if x <= 0.25\n      e = 1.1428571428571429 - 38.857142857142857 * a + 27.428571428571429 * b - 6.857142857142857 * c\n      f = 0\n      g = -0.07142857142857143 + 6.428571428571429 * a - 1.7142857142857143 * b + 0.42857142857142857 * c\n      h = 0\n    else if x <= 0.5\n      h = 0.10714285714285714 - 1.6428571428571429 * a + 1.5714285714285714 * b - 0.6428571428571429 * c\n      g = -1.3571428571428571 + 26.142857142857143 * a - 20.571428571428571 * b + 8.142857142857143 * c\n      f = 5.142857142857143 - 78.85714285714286 * a + 75.42857142857143 * b - 30.857142857142857 * c\n      e = -5.714285714285714 + 66.28571428571429 * a - 73.14285714285714 * b + 34.285714285714286 * c\n    else if x <= 0.75\n      h = -3.3214285714285714 + 10.928571428571429 * a - 16.714285714285714 * b + 11.928571428571429 * c\n      g = 19.214285714285714 - 49.28571428571429 * a + 89.14285714285714 * b - 67.28571428571429 * c\n      f = -36 + 72 * a - 144 * b + 120 * c\n      e = 21.714285714285714 - 34.285714285714286 * a + 73.14285714285714 * b - 66.28571428571429 * c\n    else\n      h = 13.071428571428571 - 6.428571428571429 * a + 25.714285714285714 * b - 32.428571428571429 * c\n      g = -46.357142857142857 + 20.142857142857143 * a - 80.57142857142857 * b + 110.14285714285714 * c\n      f = 51.42857142857143 - 20.571428571428571 * a + 82.28571428571429 * b - 116.57142857142857 * c\n      e = -17.142857142857143 + 6.857142857142857 * a - 27.428571428571429 * b + 38.857142857142857 * c\n\n    # ex^3 + fx^2 + gx + h\n    value = h + x * (g + x * (f + x * e))\n    return 0 if value < 0\n    return 1 if value > 1\n    value\n\n@Gradient =\n  Cherry: (value) ->\n    if value < 0.5\n      scaled = value / 0.5\n\n      r: 116 * scaled\n      g: 4 * scaled\n      b: 28 * scaled\n    else if value < 0.85\n      scaled = (value - 0.5) / 0.4\n\n      r: 116 + scaled * 32 # 148\n      g: 4 + scaled * 48   # 52\n      b: 28 + scaled * 88  # 116\n    else\n      scaled = (value - 0.85) / 0.15\n\n      r: 148 + scaled * 107 # 255\n      g: 52 + scaled * 203  # 255\n      b: 116 + scaled * 139 # 255\n  Emerald: (value) ->\n    if value < 0.4\n      scaled = value / 0.4\n\n      r: 255 - scaled * 156 # 99\n      g: 255 - scaled * 77  # 178\n      b: 255 - scaled * 160 # 95\n    else if value < 0.51\n      scaled = (value - 0.4) / 0.11\n\n      r: 99 - scaled * 27  # 72\n      g: 178 - scaled * 24 # 154\n      b: 95 - scaled * 41  # 54\n    else if value < 0.62\n      scaled = (value - 0.51) / 0.11\n\n      r: 72 - scaled * 33  # 39\n      g: 154 - scaled * 44 # 110\n      b: 54 - scaled * 36  # 18\n    else if value < 0.85\n      scaled = (value - 0.62) / 0.23\n\n      r: 39 - scaled * 30  # 9\n      g: 110 - scaled * 85 # 25\n      b: 18 - scaled * 4   # 14\n    else\n      scaled = (value - 0.85) / 0.15\n\n      r: 9 - scaled * 9\n      g: 25 - scaled * 25\n      b: 14 - scaled * 14\n\n#########################################################################################\n\nFormula =\n  SimpleBlended: (params, x, y) -> # formerly known as Blut\n    x: params[8] * (Math.sin(params[0] * y) + params[2] * Math.cos(params[0] * x)) + (1 - params[8]) * (y + params[4] * (x >= 0 ? 1 : -1) * Math.sqrt(Math.abs(params[5] * x - params[6]))),\n    y: params[8] * (Math.sin(params[1] * x) + params[3] * Math.cos(params[1] * y)) + (1 - params[8]) * (params[7] - x)\n  Blended: (params, x, y) ->\n    x: params[8] * (Math.sin(params[0] * y) + params[2] * Math.cos(params[0] * x)) + (1 - params[8]) * (y + params[4] * (x >= 0 ? 1 : -1) * Math.sqrt(Math.abs(params[5] * x - params[6])))\n    y: params[9] * (Math.sin(params[1] * x) + params[3] * Math.cos(params[1] * y)) + (1 - params[9]) * (params[7] - x)\n  Branched: (params, x, y) ->\n    if Math.random() < params[8]\n      nx = Math.sin(params[0] * y) + params[2] * Math.cos(params[0] * x)\n    else\n      nx = y + params[4] * (x >= 0 ? 1 : -1) * Math.sqrt(Math.abs(params[5] * x - params[6]))\n\n    if Math.random() < params[8]\n      ny = Math.sin(params[1] * x) + params[3] * Math.cos(params[1] * y)\n    else\n      ny = params[7] - x\n\n    x: nx\n    y: ny\n  SimpleBranched: (params, x, y) ->\n    if Math.random() < params[8]\n      nx = Math.sin(params[0] * y) + params[2] * Math.cos(params[0] * x)\n      ny = Math.sin(params[1] * x) + params[3] * Math.cos(params[1] * y)\n    else\n      nx = y + params[4] * (x >= 0 ? 1 : -1) * Math.sqrt(Math.abs(params[5] * x - params[6]))\n      ny = params[7] - x\n\n    x: nx\n    y: ny\n  Unnamed: (params, x, y) ->\n    x: y + params[0] * (x >= 0 ? 1 : -1) * Math.sqrt(Math.abs(params[1] * x - params[2]))\n    y: params[3] - x\n  Tinkerbell: (params, x, y) ->\n    x: x * x - y * y + params[0] * x + params[1] * y\n    y: 2 * x * y + params[2] * x + params[3] * y\n  DeJong: (params, x, y) ->\n    x: Math.sin(params[0] * y) - Math.cos(params[1] * x)\n    y: Math.sin(params[2] * x) - Math.cos(params[3] * y)\n  GumowskiMira: (params, x, y) ->\n    nx = y + params[0] * (1 - params[2] * y * y) * y + params[1] * x + 2 * (1 - params[1]) * x * x / (1 + x * x)\n    ny = -x + params[1] * nx + 2 * (1 - params[1]) * x * x / (1 + nx * nx)\n\n    x: nx\n    y: ny\n  Trigonometric: (params, x, y) ->\n    x: params[0] * Math.sin(params[1] * y) + params[2] * Math.cos(params[3] * x)\n    y: params[4] * Math.sin(params[5] * x) + params[6] * Math.cos(params[7] * y)\n  DoubleTrigonometric: (params, x, y) ->\n    x: params[0] * Math.sin(params[1] * y) + params[2] * Math.cos(params[3] * x) + params[4] * Math.sin(params[5] * x) + params[6] * Math.cos(params[7] * y)\n    y: params[8] * Math.sin(params[9] * y) + params[10] * Math.cos(params[11] * x) + params[12] * Math.sin(params[13] * x) + params[14] * Math.cos(params[15] * y)\n  Quadratic: (params, x, y) ->\n    x: params[0] + (params[1] + params[2] * x + params[3] * y) * x + (params[4] + params[5] * y) * y;\n    y: params[6] + (params[7] + params[8] * x + params[9] * y) * x + (params[10] + params[11] * y) * y;\n\nFormula.Tinkerbell.verify = true\nFormula.Quadratic.verify = true\n\nParams =\n  Standard: [2, 2, 2, 2, 2, 2, 2, 2, [0,1], [0,1]]\n  GumowskiMira: [[0, 0.1], [-1, 0.5], [0, 0.1]]\n  Sixteen: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\nverifyAttractor = (attractor) ->\n  lyapunov = 0\n\n  v1 =\n    x: Math.random() * 4 - 2\n    y: Math.random() * 4 - 2\n  ve =\n    x: v1.x + (Math.random() - 0.5) / 1000\n    y: v1.y + (Math.random() - 0.5) / 1000\n\n  dx = v1.x - ve.x\n  dy = v1.y - ve.y\n\n  startdistance = Math.sqrt(dx * dx + dy * dy)\n\n  for i in [1..5000]\n    v1 = attractor(v1.x, v1.y)\n\n    if i > 1000\n      ep = attractor(ve.x, ve.y)\n\n      dx = v1.x - ep.x\n      dy = v1.y - ep.y\n\n      distance = Math.sqrt(dx * dx + dy * dy)\n\n      lyapunov += Math.log(Math.abs(distance / startdistance))\n\n      ve.x = v1.x + startdistance * dx / distance\n      ve.y = v1.y + startdistance * dy / distance\n\n  return lyapunov >= 10\n\nrandomRange = (range) ->\n  rnd = Math.random()\n\n  if typeof range == 'number'\n    rnd * range * 2 - range\n  else\n    [min, max] = range\n    rnd * (max - min) + min\n\nAttractor = (formula, params) ->\n  fn = (x, y) -> formula(params, x, y)\n  fn.params = params\n  return fn\n\nrandomizeAttractor = (formula, ranges) ->\n  loop\n    params = ranges.map randomRange\n    attractor = Attractor(formula, params)\n\n    break unless formula.verify == true and not verifyAttractor(attractor)\n  attractor\n\nclass Reactor\n  constructor: (@attractor, options = {}) ->\n    @bounds = options.bounds || new Bounds(-2, 2, -2, 2)\n    @count = options.count || 10000\n    @ttl = options.ttl || 50\n    @cache = null\n\n    @onparticlemove = (particle, reactor) ->\n\n    @reset()\n\n  reset: ->\n    @system = for i in [0...@count]\n      position:\n        x: Math.random() * @bounds.width + @bounds.left\n        y: Math.random() * @bounds.height + @bounds.top\n      velocity:\n        x: 0\n        y: 0\n      acceleration:\n        x: 0\n        y: 0\n      ttl: (Math.random() * @ttl) | 0\n\n  step: ->\n    for particle, i in @system\n      if particle.ttl <= 0\n        particle = {\n          position:\n            x: Math.random() * @bounds.width + @bounds.left\n            y: Math.random() * @bounds.height + @bounds.top\n          velocity:\n            x: 0\n            y: 0\n          acceleration:\n            x: 0\n            y: 0\n          ttl: @ttl\n        }\n\n      position = @attractor(particle.position.x, particle.position.y)\n      velocity = {\n        x: position.x - particle.position.x\n        y: position.y - particle.position.y\n      }\n      result = {\n        position: position\n        velocity: velocity\n        acceleration:\n          x: velocity.x - particle.velocity.x\n          y: velocity.y - particle.velocity.y\n        ttl: particle.ttl - 1\n      }\n\n      @onparticlemove(result, @)\n      @system[i] = result\n\n#########################################################################################\n\n$ = (id) -> document.getElementById(id)\n\ncanvas = $('Canvas')\nctx = canvas.getContext('2d')\nsize = new Size(canvas.width|0, canvas.height|0)\n\npositionGrid = new Grid(size)\nvelocityGrid = new Grid(size)\naccelerationGrid = new Grid(size)\nrenderer = new Renderer(size, ctx)\n\n# input = {\"formula\":\"Unnamed\",\"params\":[0.4355084184519855,-0.23559170975080246,-1.3620484834403603,-0.6547066518285254,0.5852320106598246,0.3428832489223792,-1.9372635523978978,1.3320091601999255,0.5626223396408057,0.7998837324627617],\"ttl\":500,\"bounds\":{\"left\":-2,\"right\":2,\"top\":-2,\"bottom\":2,\"width\":4,\"height\":4},\"viewBounds\":{\"left\":-2.3,\"right\":1.7,\"top\":-2.4,\"bottom\":1.6,\"width\":4,\"height\":4},\"correction\":{\"enabled\":false,\"a\":0.25,\"b\":0.5,\"c\":0.75}}\n# input = {\"formula\":\"DeJong\",\"params\":[1.6623940085992217,-0.6880100890994072,1.4784153904765844,1.7967103328555822,1.3117856830358505,-1.7860524505376816,0.037012672051787376,0.9399532228708267,0.9259882022161037,0.6146395546384156],\"ttl\":20,\"bounds\":{\"left\":-2,\"right\":2,\"top\":-2,\"bottom\":2,\"width\":4,\"height\":4},\"viewBounds\":{\"left\":-2,\"right\":2,\"top\":-2,\"bottom\":2,\"width\":4,\"height\":4},\"correction\":{\"enabled\":false,\"a\":0.25,\"b\":0.5,\"c\":0.75}}\n# attractor = Attractor(Formula[input.formula], input.params)\n\nemulatedFormula = (_params, x, y) ->\n  # Formula.SimpleBlended([\n  #   -1.0642758188769221,\n  #   -1.3800999578088522,\n  #   -0.1564171528443694,\n  #   1.3192101996392012,\n  #   1.8829933917149901,\n  #   -0.13897148426622152,\n  #   -0.150858367793262,\n  #   1.5277614956721663,\n  #   ,\n  #   0.23145505599677563\n  # ], x, y)\n\n  weight = 0.13299989025108516\n  a = Formula.Trigonometric([1, -1.0642758188769219, -0.15641715284436941, -1.0642758188769219, 1, -1.3800999578088522, 1.3192101996392012, -1.3800999578088522], x, y)\n  b = Formula.Unnamed([1.88299339171499, -0.13897148426622152, -0.150858367793262, 1.5277614956721663], x, y)\n\n  x: a.x * weight + b.x * 0.86700010974891484\n  y: a.y * weight + b.y * 0.86700010974891484\n\n# attractor = Attractor(emulatedFormula)\n# attractor = Attractor(Formula.DeJong, [1.6623940085992217,-0.6880100890994072,1.4784153904765844,1.7967103328555822])\n# attractor = Attractor(Formula.DeJong, [-1.9292301883127383,-1.7559409159631594,-1.8413772506711874,-1.972643807513176])\nattractor = randomizeAttractor(Formula.SimpleBranched, Params.Standard)\n\nzoomLevel = 2.0\nviewZoomLevel = 2.0\ncenterPoint =\n  x: 0\n  y: 0\nviewCenterPoint =\n  x: 0\n  y: 0\n\nviewBounds = new Bounds(-viewZoomLevel + viewCenterPoint.x, viewZoomLevel + viewCenterPoint.x, -viewZoomLevel + viewCenterPoint.y, viewZoomLevel + viewCenterPoint.y)\n\nreactor = new Reactor(attractor, {count: 50000})\nreactor.onparticlemove = (particle, reactor) ->\n  pos = particle.position\n  vel = particle.velocity\n  accel = particle.acceleration\n\n  x = (pos.x - viewBounds.left) / viewBounds.width * positionGrid.size.width\n  y = (pos.y - viewBounds.top) / viewBounds.height * positionGrid.size.height\n\n  positionGrid.addXY(x|0, y|0)\n  velocityGrid.addXY(x|0, y|0, Math.sqrt(vel.x * vel.x + vel.y * vel.y))\n  accelerationGrid.addXY(x|0, y|0, Math.sqrt(accel.x * accel.x + accel.y * accel.y))\n\ncorrectionCurve = StandardCurve(0.25, 0.5, 0.75)\n\n@GridModifier =\n  None: (gridMapper) -> gridMapper\n  Corrected: (correctionCurve) ->\n    (gridMapper) -> GridMapper.Corrected(gridMapper, correctionCurve)\n  Inverted: (gridMapper) ->\n    return (index) -> 1 - gridMapper(index)\n  Multiplied: (constant, gridMapper) ->\n    return (index) -> constant * gridMapper(index)\n  Added: (constant, gridMapper) ->\n    return (index) -> constant + gridMapper(index)\n  Merged: (gridMapperA, gridMapperB) ->\n    return (index) -> gridMapperA(index) + gridMapperB(index)\n\n@Presets =\n  Binary: ->\n    PixelMapper.Monochrome GridMapper.Binary positionGrid\n  Monochrome: (gridModifier) ->\n    PixelMapper.Monochrome gridModifier GridMapper.Logarithmic positionGrid\n  PositionLinear: (gridModifier) ->\n    PixelMapper.Monochrome gridModifier GridMapper.Linear velocityGrid\n  Velocity: (gridModifier) ->\n    PixelMapper.Monochrome gridModifier GridMapper.Logarithmic velocityGrid\n  Acceleration: (gridModifier) ->\n    PixelMapper.Monochrome gridModifier GridMapper.Logarithmic accelerationGrid\n  PVA: (gridModifier) ->\n    modLog = (grid) -> gridModifier GridMapper.Logarithmic grid\n    PixelMapper.RGB modLog(positionGrid), modLog(velocityGrid), modLog(accelerationGrid)\n  APV: (gridModifier) ->\n    modLog = (grid) -> gridModifier GridMapper.Logarithmic grid\n    PixelMapper.RGB modLog(accelerationGrid), modLog(positionGrid), modLog(velocityGrid)\n  VAP: (gridModifier) ->\n    modLog = (grid) -> gridModifier GridMapper.Logarithmic grid\n    PixelMapper.RGB modLog(velocityGrid), modLog(accelerationGrid), modLog(positionGrid)\n  Classic: (gridModifier) ->\n    # h = GridModifier.Multiplied(0.15, GridMapper.Logarithmic(accelerationGrid))\n    # s = GridModifier.Inverted GridMapper.Linear velocityGrid\n    # l = gridModifier GridMapper.Logarithmic positionGrid\n\n    h = GridModifier.Multiplied(0.2, gridModifier GridMapper.Logarithmic velocityGrid)\n    s = GridModifier.Added(0.6, GridModifier.Multiplied(0.4, GridMapper.Linear accelerationGrid))\n    l = gridModifier GridMapper.Logarithmic positionGrid\n\n    PixelMapper.HSL h, s, l\n  DeepRed: (gridModifier) ->\n    h = GridModifier.Added(-0.125, GridModifier.Multiplied(0.2, GridMapper.Logarithmic(accelerationGrid)))\n    s = GridModifier.Multiplied(0.8, GridModifier.Inverted GridMapper.Linear velocityGrid)\n    l = GridModifier.Multiplied(0.8, gridModifier GridMapper.Logarithmic positionGrid)\n\n    PixelMapper.HSL h, s, l\n  IceBlue: (gridModifier) ->\n    h = GridModifier.Added(0.6, GridModifier.Multiplied(0.15, GridMapper.Logarithmic(accelerationGrid)))\n    s = GridModifier.Multiplied(0.4, GridModifier.Inverted GridMapper.Linear velocityGrid)\n    l = gridModifier GridMapper.Logarithmic positionGrid\n\n    PixelMapper.HSL h, s, l\n  # Emerald: (gridModifier) ->\n  #   h = GridModifier.Added(0.24, GridModifier.Multiplied(0.07, GridMapper.Logarithmic(accelerationGrid)))\n  #   s = GridModifier.Multiplied(0.6, GridModifier.Inverted GridMapper.Linear velocityGrid)\n  #   l = GridModifier.Inverted gridModifier GridMapper.Logarithmic positionGrid\n\n  #   PixelMapper.HSL h, s, l\n  Emerald: (gridModifier) ->\n    PixelMapper.Gradient(Gradient.Emerald, gridModifier GridMapper.Logarithmic positionGrid)\n  Cherry: (gridModifier) ->\n    PixelMapper.Gradient(Gradient.Cherry, gridModifier GridMapper.Logarithmic positionGrid)\n  Testing: (gridModifier) ->\n    h = GridModifier.Added(-0.35, GridModifier.Multiplied(0.45, gridModifier GridMapper.Logarithmic velocityGrid))\n    # h = GridModifier.Multiplied(0.3, GridModifier.Added(-1, gridModifier GridMapper.Logarithmic velocityGrid))\n    s = GridModifier.Added(0.6, GridModifier.Multiplied(0.4, GridMapper.Linear accelerationGrid))\n    l = gridModifier GridMapper.Logarithmic positionGrid\n\n    PixelMapper.HSL h, s, l\n\npixelMapper = Presets.APV GridModifier.None\n\nrunning = false\nrenderingEnabled = true\n\nrun = ->\n  reactor.step()\n  renderer.render(pixelMapper) if renderingEnabled\n  requestAnimationFrame(run) if running\n\ntoggle = $('Toggle')\n\nsetRunning = (r) ->\n  running = r\n  toggle.innerText = if running then 'Stop' else 'Start'\n  requestAnimationFrame(run) if running\n\ntoggle.onclick = ->\n  setRunning(!running)\n\n$('Step').onclick = ->\n  running = false\n  run()\n\n$('Save').onclick = ->\n  canvas.toBlob((blob) ->\n    url = URL.createObjectURL(blob)\n    win = window.open(url)\n    return unless win?\n\n    # Add a pagehide event after the page finishes loading to clean up memory.\n    # The onload is necessary because otherwise pagehide triggers\n    # immediately after opening, probably because the navigation\n    # redirects to the final destination.\n    win.onload = ->\n      win.onpagehide = ->\n        URL.revokeObjectURL(url)\n  'image/png')\n\nrefreshingOperation = (fn) ->\n  fn()\n  reactor.reset()\n  positionGrid.clear()\n  velocityGrid.clear()\n  accelerationGrid.clear()\n  renderer.render(pixelMapper) if renderingEnabled && !running\n\ngetState = ->\n  formula: $('Formula').value\n  params: reactor.attractor.params\n  ttl: $('TTL').valueAsNumber\n  bounds: reactor.bounds\n  viewBounds: viewBounds\n  preset: if $('Preset').value == 'Custom'\n    color: $('Color').value\n    colorShift: $('ColorShift').value\n  else\n    $('Preset').value\n  inverted: $('Inverted').checked\n  correction:\n    enabled: $('Correction').checked\n    a: $('CorrectionA').value * 0.01\n    b: $('CorrectionB').value * 0.01\n    c: $('CorrectionC').value * 0.01\n\nshowState = ->\n  $('State').innerText = JSON.stringify getState()\n\nextractZoomAndCenter = (bounds) ->\n  x = (bounds.left + bounds.right) / 2\n  y = (bounds.top + bounds.bottom) / 2\n\n  # Validate zoom level\n  z1 = bounds.right - x\n  z2 = bounds.bottom - y\n  z3 = x - bounds.left\n  z4 = y - bounds.top\n\n  if roughlyEquals(z1, z2) && roughlyEquals(z2, z3) && roughlyEquals(z3, z4)\n    zoom: Math.round((-Math.log2(z1) + 5) * 2)\n    centerX: x\n    centerY: y\n  else\n    null\n\nupdateFromState = (json) ->\n  shouldRefresh = false\n\n  # Update formula\n  validFormulas = Array.from($('Formula').options).map (o) -> o.value\n  if validFormulas.includes(json.formula)\n    $('Formula').value = json.formula\n\n    # Update params if the formula is valid\n    reactor.attractor = Attractor(Formula[json.formula], json.params)\n    shouldRefresh = true\n\n  # Update TTL\n  if typeof json.ttl == 'number' && Number.isInteger(json.ttl)\n    clampedTtl = Math.max(2, Math.min(500, json.ttl))\n    $('TTLSlider').value = clampedTtl\n    $('TTL').value = clampedTtl\n    reactor.ttl = clampedTtl\n    shouldRefresh = true\n\n  # Update bounds\n  if Bounds.areValid json.bounds\n    zac = extractZoomAndCenter(json.bounds)\n    if zac\n      {zoom, centerX, centerY} = zac\n      $('Zoom').value = zoom\n      $('CenterX').value = centerX\n      $('CenterY').value = centerY\n      reactor.bounds = Bounds.fromZoomAndCenter(zoom, centerX, centerY)\n      shouldRefresh = true\n  if Bounds.areValid json.viewBounds\n    zac = extractZoomAndCenter(json.viewBounds)\n    if zac\n      {zoom, centerX, centerY} = zac\n      $('ViewZoom').value = zoom\n      $('ViewX').value = centerX\n      $('ViewY').value = centerY\n      viewBounds = Bounds.fromZoomAndCenter(zoom, centerX, centerY)\n      shouldRefresh = true\n  $('SyncBounds').checked = false\n\n  # Update rendering\n  validPresets = Array.from($('Formula').options).map (o) -> o.value\n  if validPresets.includes(json.preset)\n    $('Preset').value = json.preset\n    shouldRefresh = true\n  else if json.preset && json.preset.color && json.preset.colorShift\n    $('Preset').value = 'Custom'\n    $('Color').value = json.preset.color\n    $('ColorShift').value = json.preset.colorShift\n    shouldRefresh = true\n\n  if json.inverted != null\n    $('Inverted').checked = !!json.inverted\n    shouldRefresh = true\n\n  if json.correction?.enabled\n    $('Correction').checked = true\n    if json.correction.a != null\n      $('CorrectionA').value = Math.floor(json.correction.a * 100)\n    if json.correction.b != null\n      $('CorrectionB').value = Math.floor(json.correction.b * 100)\n    if json.correction.c != null\n      $('CorrectionC').value = Math.floor(json.correction.c * 100)\n    shouldRefresh = true\n\n  # Refresh the thing.\n  if shouldRefresh\n    refreshingOperation ->\n      updateMapper()\n\nupdateFormula = ->\n  formulaName = $('Formula').value\n  paramsName = switch formulaName\n    when 'DoubleTrigonometric' then 'Sixteen'\n    when 'Quadratic'           then 'Sixteen'\n    when 'GumowskiMira'        then 'GumowskiMira'\n    else                            'Standard'\n\n  refreshingOperation ->\n    reactor.attractor = randomizeAttractor(Formula[formulaName], Params[paramsName])\n\n  showState()\n\nupdateMapper = ->\n  presetValue = $('Preset').value\n\n  preset = if presetValue == 'Custom'\n    $('CustomControls').className = \"controls\"\n    createCustomMapper()\n  else\n    $('CustomControls').className = \"controls hidden\"\n    Presets[presetValue]\n\n  if $('Correction').checked\n    a = $('CorrectionA').value * 0.01\n    b = $('CorrectionB').value * 0.01\n    c = $('CorrectionC').value * 0.01\n    correctionCurve = StandardCurve(a, b, c)\n\n    pixelMapper = preset GridModifier.Corrected correctionCurve\n  else\n    pixelMapper = preset GridModifier.None\n\n  if $('Inverted').checked\n    pixelMapper = PixelMapper.Inverse(pixelMapper)\n\n  renderer.render(pixelMapper) if renderingEnabled && !running\n\n  showState()\n\ncreateCustomMapper = ->\n  color = hex2rgb $('Color').value\n  hsl = rgb2hsl(color.r, color.g, color.b)\n  shift = $('ColorShift').valueAsNumber / 360\n\n  return (gridModifier) ->\n    h = GridModifier.Added(hsl.h, GridModifier.Multiplied(shift, GridMapper.Logarithmic velocityGrid))\n    s = GridMapper.Constant hsl.s\n    l = GridModifier.Multiplied(hsl.l, gridModifier GridMapper.Logarithmic(positionGrid))\n\n    PixelMapper.HSL h, s, l\n\nupdateBounds = ->\n  viewZoomLevel = $('ViewZoom').valueAsNumber\n  viewCenterPoint =\n    x: $('ViewX').valueAsNumber\n    y: $('ViewY').valueAsNumber\n\n  if $('SyncBounds').checked\n    zoomLevel = viewZoomLevel\n    centerPoint = viewCenterPoint\n  else\n    zoomLevel = $('Zoom').valueAsNumber\n    centerPoint =\n      x: $('CenterX').valueAsNumber\n      y: $('CenterY').valueAsNumber\n\n  refreshingOperation ->\n    reactor.bounds = Bounds.fromZoomAndCenter(zoomLevel, centerPoint.x, centerPoint.y)\n    viewBounds = Bounds.fromZoomAndCenter(viewZoomLevel, viewCenterPoint.x, viewCenterPoint.y)\n\n  showState()\n\nupdateBoundsSync = ->\n  sync = $('SyncBounds').checked\n\n  $('Zoom').disabled = sync\n  $('CenterX').disabled = sync\n  $('CenterY').disabled = sync\n\n  updateBounds()\n\nupdateTTL = ->\n  ttl = $('TTL').valueAsNumber\n\n  refreshingOperation ->\n    reactor.ttl = ttl\n\n  showState()\n\n$('Rendering').onchange = ->\n  renderingEnabled = $('Rendering').checked\n\n  renderer.render(pixelMapper) if renderingEnabled && !running\n\n$('Formula').onchange = updateFormula\n$('Randomize').onclick = updateFormula\n$('Preset').onchange = updateMapper\n$('Inverted').onchange = updateMapper\n$('Correction').onchange = updateMapper\n$('CorrectionA').onchange = updateMapper\n$('CorrectionB').onchange = updateMapper\n$('CorrectionC').onchange = updateMapper\n$('Zoom').onchange = updateBounds\n$('CenterX').onchange = updateBounds\n$('CenterY').onchange = updateBounds\n$('ViewZoom').onchange = updateBounds\n$('ViewX').onchange = updateBounds\n$('ViewY').onchange = updateBounds\n$('SyncBounds').onchange = updateBoundsSync\n\ncolorTimeout = null\n$('Color').onchange = ->\n  clearTimeout(colorTimeout)\n  colorTimeout = setTimeout(updateMapper, 150)\n\n$('ColorShiftSlider').onchange = ->\n  $('ColorShift').value = $('ColorShiftSlider').value\n  updateMapper()\n\n$('ColorShift').onchange = ->\n  $('ColorShiftSlider').value = $('ColorShift').value\n  updateMapper()\n\n$('TTLSlider').onchange = ->\n  $('TTL').value = $('TTLSlider').value\n  updateTTL()\n\n$('TTL').onchange = ->\n  $('TTLSlider').value = $('TTL').value\n  updateTTL()\n\n$('ResetBounds').onclick = (e) ->\n  e.preventDefault()\n\n  $('ViewZoom').value = 8\n  $('ViewX').value = 0\n  $('ViewY').value = 0\n\n  updateBounds()\n\n$('ResetCorrection').onclick = (e) ->\n  e.preventDefault()\n\n  $('CorrectionA').value = 25\n  $('CorrectionB').value = 50\n  $('CorrectionC').value = 75\n\n  updateMapper()\n\nshowState()\n\n# Debugging tools\nwindow.updateFromState = updateFromState\n\n# Handling of URL params\nsearchParams = new URLSearchParams(window.location.search)\ncreationId = searchParams.get 'creation'\nshouldStop = searchParams.has 'stop'\n\nsetRunning(!shouldStop && creationId == null)\n\n# Integration with pondiverse.com\n\nimport('https://www.pondiverse.com/pondiverse.js').then (p) ->\n  p.addPondiverseButton ->\n    type: 'chaoskit'\n    data: JSON.stringify getState()\n    image: canvas.toDataURL('image/png')\n\n  if creationId != null\n    p.fetchPondiverseCreation(creationId).then (creation) ->\n      state = JSON.parse creation.data\n      updateFromState state\n      setRunning !shouldStop\n    .catch ->\n      setRunning !shouldStop\n"
  ]
}